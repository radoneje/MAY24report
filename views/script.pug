html
    head
        title="Статистика"
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
        <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
        <script src="/axios.min.js"></script>
        style.
            .scriptContainer{
                padding: 12px;
                border:1px solid gray;
                border-radius: 4px;
            }

            tbody, td, tfoot, th, thead, tr {
                 border-color: gray;
                 border-style: solid;
                 border-width: 1px;
            }
            @media print{
                .noPrint{
                    display: none !important;
                }

                @page {
                    margin: 0;
                }

                body {
                    margin: 1.6cm;
                }
            }
        body
            .container
                #app
                    .mt-2.noPrint
                        select#template(onchange="reloadTemplate()")
                            each t in templates
                                option(value=t.value) #{t.name}
                        input(type="button" value="Печать" onclick="window.print()")
                    #scriptContainer.mt-4
            script.
                let news = !{JSON.stringify(news)};
                let blocks = !{JSON.stringify(blocks)};
            script.
                const replaceSpecialCh=(text)=>{
                    try {
                        if (!text)
                            return ""
                        return text
                            .replace(/</igm, "&lt;")
                            .replace(/>/igm, "&gt;")
                            .replace(/\r\n/igm, "\n")
                            .replace(/[\n]{2,}/igm, "\n\n")
                            .replace(/\n/igm, "<br>")
                            .replace(/(\(\([^\)]*(?:\)[^\)]+)*\)\))/gm,"<div class='sot'>$1</div>")
                    }
                    catch (e) {
                        console.warn(text)
                        return ""
                    }
                }
                const secToText=(totalSeconds)=>{
                    let hours = String(Math.floor(totalSeconds / 3600)).padStart(2, "0");
                    totalSeconds %= 3600;
                    let minutes = String(Math.floor(totalSeconds / 60)).padStart(2, "0");
                    let seconds = String(totalSeconds % 60).padStart(2, "0");
                    return hours + ":" + minutes + ":" + seconds

                }
                const totalTime=()=>{
                    let total = 0;
                    blocks.forEach(block => {
                        console.log(total)
                        total += block.BlockTime > 0 ? block.BlockTime : block.CalcTime
                    });
                    return total;
                }
                const reloadTemplate=()=>{
                    let template=JSON.parse(document.getElementById("template").value)
                    let box=document.getElementById("scriptContainer")
                    console.log(news)
                    let html=template.news
                        .replace(/\$NewsId/g, news.id)
                        .replace(/\$NewsName/g,news.Name)
                        .replace(/\$NewsOwner/g,"")
                        .replace(/\$EditorId/g,news.EditorId)

                        .replace(/\$NewsDate/g,news.NewsDate)
                        .replace(/\$NewsDuration/g,secToText(news.Duration))
                        .replace(/\$NewsCronoTask/g,secToText(news.TaskTime))
                        .replace(/\$NewsCronoCalk/g,secToText(news.CalcTime))
                        .replace(/\$NewsCronoReal/g,(t)=>{return secToText(totalTime())})
                        .replace(/\$NewsChronoReal/g,(t)=>{return secToText(totalTime())})
                        .replace(/\$NewsSourceLabel/g,news.Cassete)
                        .replace(/\$NewsTimeCode/g,secToText(news.Time_Code))



                    let blocksHtml=""
                    blocks.forEach(block=>{
                        let blockHtml=new String(template.block)
                        blockHtml=blockHtml
                            .replace(/\$BlockName/g, replaceSpecialCh(block.name))
                            .replace(/\$BlockText/g, replaceSpecialCh(block.BlockText))
                            .replace(/\$BlockAutor/g, block.author?replaceSpecialCh(block.author):"")
                            .replace(/\$BlockOperator/g, block.operator?replaceSpecialCh(block.operator):"")
                            .replace(/\$BlockJockey/g, block.jockey?replaceSpecialCh(block.jockey):"")
                            .replace(/\$BlockCutter/g, block.cutter?replaceSpecialCh(block.cutter):"")
                            .replace(/\$BlockCronoReal/g, secToText(block.BlockTime))
                            .replace(/\$BlockCronoTask/g, secToText(block.TaskTime))
                            .replace(/\$BlockCronoCalc/g, secToText(block.CalcTime))
                            .replace(/\$BlockReady/g, replaceSpecialCh(block.Ready?"True":"False"))
                            .replace(/\$BlockApprove/g, replaceSpecialCh(block.Approve?"True":"False"))
                            .replace(/\$BlockTypeId/g, replaceSpecialCh(block.BLockType))
                            .replace(/\$BlockType/g, replaceSpecialCh(block.typename))
                            .replace(/\$BlockNumber/g, (block.Sort))
                            .replace(/\$BlockId/g, (block.id))
                            .replace(/\$TextLang1/g, replaceSpecialCh(block.TextLang1))
                            .replace(/\$TextLang2/g, replaceSpecialCh(block.TextLang2))
                            .replace(/\$TextLang3/g, replaceSpecialCh(block.TextLang2))
                            .replace(/\@BLOCKFLAG/g, replaceSpecialCh(''))
                            .replace(/\@BLOCKDEPEND/g, replaceSpecialCh(''))




                        blocksHtml+=blockHtml

                    })
                    html=html.replace("@BLOCK",blocksHtml)
                    box.innerHTML=html
                }
                reloadTemplate()


